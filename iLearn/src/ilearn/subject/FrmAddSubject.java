/*
 * FrmAddSubject.java
 *
 * Created on Feb 22, 2011, 9:28:12 AM
 */
package ilearn.subject;

import ilearn.kernel.Utilities;
import ilearn.staff.Staff;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;

/**
 *
 * @author m.rogers
 */
public class FrmAddSubject extends javax.swing.JInternalFrame
{
    
    String validationText = "";

    /** Creates new form FrmAddSubject */
    public FrmAddSubject()
    {
        initComponents();
        populateLists();
        //TimeList.setListData(TimeSlots.getTimeSlotList().toArray());
    }
    
    @Action
    public void cancel()
    {
        this.dispose();
    }
    
    @Action
    public void save()
    {
        if (!passedValidation())
        {
            Utilities.showWarningMessage(rootPane, validationText);
            return;
        }
        String subCode = txtSubjectCode.getText().trim(),
                subStaffCode = Staff.getStaffCodeFromName(cmbTeacher.getSelectedItem().toString()),
                subName = txtSubjectName.getText().trim(),
                subDescription = txtDescription.getText().trim(),
                subCreditHours = spinnerCreditHours.getValue().toString();
        boolean subjectAdded = Subject.addSubject(subCode, subStaffCode, subName, subDescription, subCreditHours);
        String subjectID = Subject.getSubjectID(subCode);
        boolean weightingsSaved = Subject.saveWeightings(subjectID);
        if (subjectAdded && weightingsSaved)
        {
            String message = "The Subject was successfully added.\n"
                    + "Would you like to add another?";
            int response = Utilities.showConfirmDialog(rootPane, message);
            if (response == JOptionPane.YES_OPTION)
            {
                resetForm();
            }
            else
            {
                this.dispose();
            }
        }
        else
        {
            String message = "An error occurred while trying to add this subject.\n"
                    + "Kindly verify your information and try again.\n"
                    + "If the problem persists kindly contact your system administrator.";
            Utilities.showErrorMessage(rootPane, message);
        }
    }
    
    @Action
    public void add()
    {
        AddHour addHour = new AddHour(null, true);
        addHour.setLocationRelativeTo(this);
        addHour.setVisible(true);
        loadSelectedHours();
    }
    
    @Action
    public void remove()
    {
        Subject.removeHour(TimeList.getSelectedValue().toString());
        loadSelectedHours();
    }
    
    private void loadSelectedHours()
    {
        TimeList.setListData(Subject.getHours().toArray());
    }
    
    private void populateLists()
    {
        Subject.resetHours();
        Subject.resetWeightings();
        ArrayList<String> teacherList = new ArrayList<String>();
        teacherList.add("--- Select One ---");
        teacherList.addAll(Staff.getStaffList());
        cmbTeacher.setModel(new DefaultComboBoxModel(teacherList.toArray()));
    }
    
    @Action
    public void resetForm()
    {
        remove(subjectTabbedPane);
        initComponents();
        populateLists();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdCancel = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdReset = new javax.swing.JButton();
        subjectTabbedPane = new javax.swing.JTabbedPane();
        generalPanel = new javax.swing.JPanel();
        lblSubjectCode = new javax.swing.JLabel();
        txtSubjectCode = new javax.swing.JTextField();
        lblSubjectName = new javax.swing.JLabel();
        txtSubjectName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        lblDays_Time = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TimeList = new javax.swing.JList();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        cmbTeacher = new javax.swing.JComboBox();
        lblTeacher = new javax.swing.JLabel();
        spinnerCreditHours = new javax.swing.JSpinner();
        lblCreditHours = new javax.swing.JLabel();
        weightingPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        weightingTable = new javax.swing.JTable();
        cmdRemoveWeighting = new javax.swing.JButton();
        cmdAddWeighting = new javax.swing.JButton();
        lblTotalWeight = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(FrmAddSubject.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setToolTipText(resourceMap.getString("Form.toolTipText")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(FrmAddSubject.class, this);
        cmdCancel.setAction(actionMap.get("cancel")); // NOI18N
        cmdCancel.setText(resourceMap.getString("cmdCancel.text")); // NOI18N
        cmdCancel.setName("cmdCancel"); // NOI18N

        cmdSave.setAction(actionMap.get("save")); // NOI18N
        cmdSave.setText(resourceMap.getString("cmdSave.text")); // NOI18N
        cmdSave.setName("cmdSave"); // NOI18N

        cmdReset.setAction(actionMap.get("resetForm")); // NOI18N
        cmdReset.setText(resourceMap.getString("cmdReset.text")); // NOI18N
        cmdReset.setName("cmdReset"); // NOI18N

        subjectTabbedPane.setName("subjectTabbedPane"); // NOI18N

        generalPanel.setName("generalPanel"); // NOI18N

        lblSubjectCode.setText(resourceMap.getString("lblSubjectCode.text")); // NOI18N
        lblSubjectCode.setName("lblSubjectCode"); // NOI18N

        txtSubjectCode.setText(resourceMap.getString("txtSubjectCode.text")); // NOI18N
        txtSubjectCode.setToolTipText(resourceMap.getString("txtSubjectCode.toolTipText")); // NOI18N
        txtSubjectCode.setName("txtSubjectCode"); // NOI18N

        lblSubjectName.setText(resourceMap.getString("lblSubjectName.text")); // NOI18N
        lblSubjectName.setName("lblSubjectName"); // NOI18N

        txtSubjectName.setText(resourceMap.getString("txtSubjectName.text")); // NOI18N
        txtSubjectName.setToolTipText(resourceMap.getString("txtSubjectName.toolTipText")); // NOI18N
        txtSubjectName.setName("txtSubjectName"); // NOI18N

        lblDescription.setText(resourceMap.getString("lblDescription.text")); // NOI18N
        lblDescription.setName("lblDescription"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        txtDescription.setToolTipText(resourceMap.getString("txtDescription.toolTipText")); // NOI18N
        txtDescription.setName("txtDescription"); // NOI18N
        jScrollPane1.setViewportView(txtDescription);

        lblDays_Time.setText(resourceMap.getString("lblDays_Time.text")); // NOI18N
        lblDays_Time.setName("lblDays_Time"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        TimeList.setToolTipText(resourceMap.getString("TimeList.toolTipText")); // NOI18N
        TimeList.setName("TimeList"); // NOI18N
        jScrollPane2.setViewportView(TimeList);

        cmdAdd.setAction(actionMap.get("add")); // NOI18N
        cmdAdd.setIcon(resourceMap.getIcon("cmdAdd.icon")); // NOI18N
        cmdAdd.setText(resourceMap.getString("cmdAdd.text")); // NOI18N
        cmdAdd.setName("cmdAdd"); // NOI18N

        cmdRemove.setAction(actionMap.get("remove")); // NOI18N
        cmdRemove.setIcon(resourceMap.getIcon("cmdRemove.icon")); // NOI18N
        cmdRemove.setText(resourceMap.getString("cmdRemove.text")); // NOI18N
        cmdRemove.setName("cmdRemove"); // NOI18N

        cmbTeacher.setName("cmbTeacher"); // NOI18N

        lblTeacher.setText(resourceMap.getString("lblTeacher.text")); // NOI18N
        lblTeacher.setName("lblTeacher"); // NOI18N

        spinnerCreditHours.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(0), null, Integer.valueOf(1)));
        spinnerCreditHours.setName("spinnerCreditHours"); // NOI18N

        lblCreditHours.setText(resourceMap.getString("lblCreditHours.text")); // NOI18N
        lblCreditHours.setName("lblCreditHours"); // NOI18N

        javax.swing.GroupLayout generalPanelLayout = new javax.swing.GroupLayout(generalPanel);
        generalPanel.setLayout(generalPanelLayout);
        generalPanelLayout.setHorizontalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPanelLayout.createSequentialGroup()
                        .addComponent(cmdAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdRemove))
                    .addGroup(generalPanelLayout.createSequentialGroup()
                        .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSubjectCode)
                            .addComponent(lblSubjectName)
                            .addComponent(lblDescription)
                            .addComponent(lblCreditHours)
                            .addComponent(lblTeacher)
                            .addComponent(lblDays_Time))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(cmbTeacher, javax.swing.GroupLayout.Alignment.TRAILING, 0, 307, Short.MAX_VALUE)
                            .addComponent(spinnerCreditHours, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(txtSubjectName, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                            .addComponent(txtSubjectCode, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))))
                .addContainerGap())
        );
        generalPanelLayout.setVerticalGroup(
            generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectCode)
                    .addComponent(txtSubjectCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSubjectName)
                    .addComponent(txtSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerCreditHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCreditHours))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeacher))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDays_Time)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdRemove)
                    .addComponent(cmdAdd))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        subjectTabbedPane.addTab(resourceMap.getString("generalPanel.TabConstraints.tabTitle"), resourceMap.getIcon("generalPanel.TabConstraints.tabIcon"), generalPanel); // NOI18N

        weightingPanel.setEnabled(false);
        weightingPanel.setName("weightingPanel"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        weightingTable.setAutoCreateRowSorter(true);
        weightingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Assessment Type", "Weight (Percent)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        weightingTable.setName("weightingTable"); // NOI18N
        weightingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weightingTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(weightingTable);

        cmdRemoveWeighting.setAction(actionMap.get("weightingRemove")); // NOI18N
        cmdRemoveWeighting.setName("cmdRemoveWeighting"); // NOI18N

        cmdAddWeighting.setAction(actionMap.get("weightingAdd")); // NOI18N
        cmdAddWeighting.setName("cmdAddWeighting"); // NOI18N

        lblTotalWeight.setText(resourceMap.getString("lblTotalWeight.text")); // NOI18N
        lblTotalWeight.setName("lblTotalWeight"); // NOI18N

        javax.swing.GroupLayout weightingPanelLayout = new javax.swing.GroupLayout(weightingPanel);
        weightingPanel.setLayout(weightingPanelLayout);
        weightingPanelLayout.setHorizontalGroup(
            weightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(weightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(weightingPanelLayout.createSequentialGroup()
                        .addComponent(lblTotalWeight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                        .addComponent(cmdAddWeighting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdRemoveWeighting)))
                .addContainerGap())
        );
        weightingPanelLayout.setVerticalGroup(
            weightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(weightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdRemoveWeighting)
                    .addComponent(cmdAddWeighting)
                    .addComponent(lblTotalWeight))
                .addContainerGap())
        );

        subjectTabbedPane.addTab(resourceMap.getString("weightingPanel.TabConstraints.tabTitle"), resourceMap.getIcon("weightingPanel.TabConstraints.tabIcon"), weightingPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subjectTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(cmdSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subjectTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCancel)
                    .addComponent(cmdSave)
                    .addComponent(cmdReset))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weightingTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_weightingTableMouseClicked
    {//GEN-HEADEREND:event_weightingTableMouseClicked
        if (weightingTable.getSelectedRow() != -1 && evt.getClickCount() >= 2)
        {
            String assessment = weightingTable.getValueAt(weightingTable.getSelectedRow(), 0).toString();
            int weight = Integer.valueOf(weightingTable.getValueAt(weightingTable.getSelectedRow(), 1).toString());
            FrmAddWeighting frmAddWeighting = new FrmAddWeighting(null, true, assessment, weight);
            frmAddWeighting.setLocationRelativeTo(this);
            frmAddWeighting.setVisible(true);
            weightingTable.setModel(Subject.getWeightingTable());
            lblTotalWeight.setText("Total Weight: " + Subject.getWeightTotal() + "%");
        }
    }//GEN-LAST:event_weightingTableMouseClicked
    
    @Action
    public void weightingRemove()
    {
        if (weightingTable.getSelectedRow() != -1)
        {
            String message = "Are you sure you want to remove this item from the list?";
            int response = Utilities.showConfirmDialog(rootPane, message);
            if (response == JOptionPane.YES_OPTION)
            {
                String assessment = weightingTable.getValueAt(weightingTable.getSelectedRow(), 0).toString();
                Subject.removeWeighting(assessment);
                weightingTable.setModel(Subject.getWeightingTable());
                lblTotalWeight.setText("Total Weight: " + Subject.getWeightTotal() + "%");
            }
        }
        else
        {
            String message = "Kindly select an item before clicking remove.";
            Utilities.showWarningMessage(rootPane, message);
        }
    }
    
    @Action
    public void weightingAdd()
    {
        FrmAddWeighting frmAddWeighting = new FrmAddWeighting(null, true);
        frmAddWeighting.setLocationRelativeTo(this);
        frmAddWeighting.setVisible(true);
        weightingTable.setModel(Subject.getWeightingTable());
        lblTotalWeight.setText("Total Weight: " + Subject.getWeightTotal() + "%");
    }
    
    private boolean passedValidation()
    {
        boolean passed = true;
        validationText = "The following issue(s) were found while trying to save:\n\n";
        if (Subject.getWeightTotal() != 100 && Subject.getWeightTotal() != 0)
        {
            validationText += "The weighting total must either be equal to 0 OR 100 before you are able to save.\n";
            passed = false;
        }
        if (txtSubjectCode.getText().trim().isEmpty())
        {
            validationText += "The subject code cannot be empty.\n";
            passed = false;
        }
        if (txtSubjectName.getText().trim().isEmpty())
        {
            validationText += "The subject name cannot be empty.\n";
            passed = false;
        }
        if (cmbTeacher.getSelectedItem().toString().equals("--- Select One ---"))
        {
            validationText += "You must select a teacher from the list.\n";
            passed = false;
        }
        return passed;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList TimeList;
    private javax.swing.JComboBox cmbTeacher;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAddWeighting;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdRemoveWeighting;
    private javax.swing.JButton cmdReset;
    private javax.swing.JButton cmdSave;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCreditHours;
    private javax.swing.JLabel lblDays_Time;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblSubjectCode;
    private javax.swing.JLabel lblSubjectName;
    private javax.swing.JLabel lblTeacher;
    private javax.swing.JLabel lblTotalWeight;
    private javax.swing.JSpinner spinnerCreditHours;
    private javax.swing.JTabbedPane subjectTabbedPane;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtSubjectCode;
    private javax.swing.JTextField txtSubjectName;
    private javax.swing.JPanel weightingPanel;
    private javax.swing.JTable weightingTable;
    // End of variables declaration//GEN-END:variables
}
