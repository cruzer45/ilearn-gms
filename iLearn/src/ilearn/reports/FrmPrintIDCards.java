/*
 * FrmPrintIDCards.java
 *
 * Created on Jul 18, 2011, 11:40:18 AM
 */
package ilearn.reports;

import ilearn.kernel.ImageFilter;
import ilearn.kernel.Utilities;
import ilearn.student.FrmNewStudent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author m.rogers
 */
public class FrmPrintIDCards extends javax.swing.JInternalFrame
{

    static final Logger logger = Logger.getLogger(FrmPrintIDCards.class.getName());
    JComponent parent = this.getRootPane();
    File selectedFile;
    String warning = "";

    /** Creates new form FrmPrintIDCards */
    public FrmPrintIDCards()
    {
        initComponents();
        populateLists();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        lblBackground = new javax.swing.JLabel();
        txtBackground = new javax.swing.JTextField();
        cmdBrowse = new javax.swing.JButton();
        lblExpire = new javax.swing.JLabel();
        calExpire = new com.toedter.calendar.JDateChooser();
        cmdCancel = new javax.swing.JButton();
        cmdGenerate = new javax.swing.JButton();
        setClosable(true);
        setIconifiable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class).getContext().getResourceMap(FrmPrintIDCards.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        lblBackground.setText(resourceMap.getString("lblBackground.text")); // NOI18N
        lblBackground.setName("lblBackground"); // NOI18N
        txtBackground.setText(resourceMap.getString("txtBackground.text")); // NOI18N
        txtBackground.setName("txtBackground"); // NOI18N
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class).getContext().getActionMap(FrmPrintIDCards.class, this);
        cmdBrowse.setAction(actionMap.get("browse")); // NOI18N
        cmdBrowse.setText(resourceMap.getString("cmdBrowse.text")); // NOI18N
        cmdBrowse.setName("cmdBrowse"); // NOI18N
        lblExpire.setText(resourceMap.getString("lblExpire.text")); // NOI18N
        lblExpire.setName("lblExpire"); // NOI18N
        calExpire.setName("calExpire"); // NOI18N
        cmdCancel.setAction(actionMap.get("cancel")); // NOI18N
        cmdCancel.setText(resourceMap.getString("cmdCancel.text")); // NOI18N
        cmdCancel.setName("cmdCancel"); // NOI18N
        cmdGenerate.setAction(actionMap.get("generateIDCards")); // NOI18N
        cmdGenerate.setText(resourceMap.getString("cmdGenerate.text")); // NOI18N
        cmdGenerate.setName("cmdGenerate"); // NOI18N
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmdBrowse, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                  .addComponent(lblBackground)
                                                  .addComponent(lblExpire))
                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                  .addComponent(calExpire, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                                                  .addComponent(txtBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                          .addComponent(cmdGenerate)
                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                          .addComponent(cmdCancel)))
                      .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(calExpire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblExpire))
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblBackground)
                                .addComponent(txtBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(cmdBrowse)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmdCancel)
                                .addComponent(cmdGenerate))
                      .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateLists()
    {
        calExpire.setDate(new Date());
    }

    @Action
    public void browse()
    {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new ImageFilter());
        int returnVal = fc.showOpenDialog(rootPane);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            selectedFile = fc.getSelectedFile();
            try
            {
                txtBackground.setText(selectedFile.getCanonicalPath().toString());
            }
            catch (IOException ex)
            {
                Logger.getLogger(FrmNewStudent.class.getName()).log(Level.SEVERE, "Error while selecting the file. ", ex);
            }
        }
    }

    @Action
    public Task generateIDCards()
    {
        return new GenerateIDCardsTask(org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class));
    }

    private class GenerateIDCardsTask extends org.jdesktop.application.Task<Object, Void>
    {

        Date exipreDate;
        String background;

        GenerateIDCardsTask(org.jdesktop.application.Application app)
        {
            super(app);
            exipreDate = calExpire.getDate();
            background = txtBackground.getText().trim();
            if (background.isEmpty())
            {
                URL sampleImage = FrmPrintIDCards.class.getResource("/ilearn/resources/Sample-Card-BG.png");
                try
                {
                    selectedFile = new File(sampleImage.toURI());
                    background = selectedFile.getCanonicalPath().toString();
                }
                catch (Exception ex)
                {
                }
            }
        }

        @Override
        protected Object doInBackground()
        {
            setMessage("Loading reporting engine.");
            ReportLoader.printIDCards(exipreDate, background);
            return null;  // return your result
        }
    }

    @Action
    public void cancel()
    {
        Utilities.showCancelScreen(this);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser calExpire;
    private javax.swing.JButton cmdBrowse;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblExpire;
    private javax.swing.JTextField txtBackground;
    // End of variables declaration//GEN-END:variables
}
