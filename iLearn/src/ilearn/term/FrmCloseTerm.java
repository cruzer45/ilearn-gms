/*
 * FrmCloseTerm.java
 *
 * Created on Jun 29, 2011, 9:07:57 AM
 */
package ilearn.term;

import ilearn.demerits.Demerits;
import ilearn.detentions.Detention;
import ilearn.grades.Grade;
import ilearn.kernel.Environment;
import ilearn.kernel.Utilities;
import ilearn.promotion.Promote;
import ilearn.register.Register;
import ilearn.reports.ReportLoader;
import ilearn.utils.FrmErrors;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author m.rogers
 */
public class FrmCloseTerm extends javax.swing.JInternalFrame
{

    /** Creates new form FrmCloseTerm */
    public FrmCloseTerm()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        lblWarning1 = new javax.swing.JLabel();
        lblWarning2 = new javax.swing.JLabel();
        lblCancel = new javax.swing.JButton();
        lblCloseTerm = new javax.swing.JButton();
        setClosable(true);
        setIconifiable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(FrmCloseTerm.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        lblWarning1.setFont(lblWarning1.getFont().deriveFont(lblWarning1.getFont().getStyle() | java.awt.Font.BOLD, lblWarning1.getFont().getSize()+7));
        lblWarning1.setForeground(resourceMap.getColor("lblWarning1.foreground")); // NOI18N
        lblWarning1.setText(resourceMap.getString("lblWarning1.text")); // NOI18N
        lblWarning1.setName("lblWarning1"); // NOI18N
        lblWarning2.setForeground(resourceMap.getColor("lblWarning2.foreground")); // NOI18N
        lblWarning2.setText(resourceMap.getString("lblWarning2.text")); // NOI18N
        lblWarning2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblWarning2.setName("lblWarning2"); // NOI18N
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(FrmCloseTerm.class, this);
        lblCancel.setAction(actionMap.get("cancel")); // NOI18N
        lblCancel.setText(resourceMap.getString("lblCancel.text")); // NOI18N
        lblCancel.setName("lblCancel"); // NOI18N
        lblCloseTerm.setAction(actionMap.get("closeSemester")); // NOI18N
        lblCloseTerm.setText(resourceMap.getString("lblCloseTerm.text")); // NOI18N
        lblCloseTerm.setName("lblCloseTerm"); // NOI18N
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblWarning2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                                .addComponent(lblWarning1)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                          .addComponent(lblCloseTerm)
                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                          .addComponent(lblCancel)))
                      .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addComponent(lblWarning1)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(lblWarning2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCloseTerm)
                                .addComponent(lblCancel))
                      .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void cancel()
    {
        Utilities.showCancelScreen(this);
    }

    @Action
    public Task closeSemester()
    {
        String message = "Kindly confirm that you want to close the semester.";
        int response = Utilities.showConfirmDialog(rootPane, message);
        if (response == JOptionPane.YES_OPTION)
        {
            return new CloseSemesterTask(org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class));
        }
        else
        {
            return null;
        }
    }

    private class CloseSemesterTask extends org.jdesktop.application.Task<Object, Void>
    {

        String warnings = "Cannot close the term due to the following issue(s):\n\n";

        CloseSemesterTask(org.jdesktop.application.Application app)
        {
            super(app);
        }

        @Override
        protected Object doInBackground()
        {
            setMessage("Running pre-close checks.");
            setMessage("Checking grades");
            int missingGrades = Grade.getMissingGradeCount();
            if (missingGrades > 0)
            {
                String message = " There are " + missingGrades + " missing grades currently. \n\n"
                                 + "Select Yes to proceed closinbg the term with these missing grades.\n"
                                 + "Select No to view a report displaying these missing grades.\n"
                                 + "Select Cancel to stop the process.";
                try
                {
                    Thread.sleep(2000);
                }
                catch (Exception e)
                {
                }
                int response = Utilities.showYNCConfirmDialog(rootPane, message);
                if (response == JOptionPane.NO_OPTION)
                {
                    setMessage("Loading reporting engine");
                    ReportLoader.showMissingGradeReportReport();
                    warnings += "Missing Grades were found in the system.\n"
                                + "A report displaying the missing grades was generated.";
                    this.cancel(true);
                    return null;
                }
                else if (response == JOptionPane.CANCEL_OPTION)
                {
                    warnings += "Missing Grades were found in the system.\n"
                                + "The user cancelled the process.";
                    this.cancel(true);
                    return null;
                }
            }
            setProgress(1, 0, 8);
            setMessage("Closing Assessments");
            boolean closeAssessments = Grade.closeAssessments();
            if (!closeAssessments)
            {
                warnings += "An error occurred while closing the assessments.\n";
                return false;
            }
            setProgress(2, 0, 8);
            setMessage("Closing Demerits");
            boolean closeDemerits = Demerits.closeDemerits();
            if (!closeDemerits)
            {
                warnings += "An error occurred while closing the demerits.\n";
                return false;
            }
            setProgress(3, 0, 8);
            setMessage("Closing Detentions");
            boolean closeDetentions = Detention.closeDetentions();
            if (!closeDetentions)
            {
                warnings += "An error occurred while closing the detentions.\n";
                return false;
            }
            setProgress(4, 0, 8);
            setMessage("Closing Grades");
            boolean closeGrades = Grade.closeGrades();
            if (!closeGrades)
            {
                warnings += "An error occurred while closing the grades.\n";
                return false;
            }
            setProgress(5, 0, 8);
            setMessage("Closing Attendance Registers");
            boolean closeRegister = Register.closeRegister();
            if (!closeRegister)
            {
                warnings += "An error occurred while closing the register.\n";
                return false;
            }
            setProgress(6, 0, 8);
            setMessage("Promoting Students");
            boolean promoteStudents = Promote.promoteStudents();
            if (!promoteStudents)
            {
                warnings += "An error occurred while promoting the students.\n";
                return false;
            }
            setProgress(7, 0, 8);
            setMessage("Closing Term");
            boolean closeTerm = Term.closeTerm();
            if (!closeTerm)
            {
                warnings += "An error occurred while closing the term.\n";
                return false;
            }
            setProgress(8, 0, 8);
            return true;  // return your result
        }

        @Override
        protected void succeeded(Object result)
        {
            if (result == Boolean.TRUE)
            {
                String message = "The term was successfully closed.\n\n"
                                 + "Don't forget to create a new term.";
                Utilities.showInfoMessage(rootPane, message);
                return;
            }
            else
            {
                FrmErrors frmErrors = new FrmErrors(null, true, warnings);
                frmErrors.setLocationRelativeTo(Environment.getMainFrame());
                frmErrors.setVisible(true);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton lblCancel;
    private javax.swing.JButton lblCloseTerm;
    private javax.swing.JLabel lblWarning1;
    private javax.swing.JLabel lblWarning2;
    // End of variables declaration//GEN-END:variables
}
