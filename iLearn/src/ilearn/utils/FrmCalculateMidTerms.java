/*
 * FrmCalculateMidTerms.java
 *
 * Created on Jul 7, 2011, 9:49:34 PM
 */
package ilearn.utils;

import ilearn.grades.Grade;
import ilearn.kernel.Environment;
import ilearn.kernel.Utilities;
import ilearn.student.Student;
import java.util.ArrayList;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author mrogers
 */
public class FrmCalculateMidTerms extends javax.swing.JInternalFrame
{

    /** Creates new form FrmCalculateMidTerms */
    public FrmCalculateMidTerms()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        cmdCancel = new javax.swing.JButton();
        lblWarning2 = new javax.swing.JLabel();
        lblWarning = new javax.swing.JLabel();
        cmdGenerate = new javax.swing.JButton();
        setClosable(true);
        setIconifiable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class).getContext().getResourceMap(FrmCalculateMidTerms.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class).getContext().getActionMap(FrmCalculateMidTerms.class, this);
        cmdCancel.setAction(actionMap.get("cancel")); // NOI18N
        cmdCancel.setText(resourceMap.getString("cmdCancel.text")); // NOI18N
        cmdCancel.setName("cmdCancel"); // NOI18N
        lblWarning2.setText(resourceMap.getString("lblWarning2.text")); // NOI18N
        lblWarning2.setName("lblWarning2"); // NOI18N
        lblWarning.setFont(lblWarning.getFont().deriveFont(lblWarning.getFont().getStyle() | java.awt.Font.BOLD, lblWarning.getFont().getSize()+4));
        lblWarning.setText(resourceMap.getString("lblWarning.text")); // NOI18N
        lblWarning.setName("lblWarning"); // NOI18N
        cmdGenerate.setAction(actionMap.get("generateMidTerms")); // NOI18N
        cmdGenerate.setText(resourceMap.getString("cmdGenerate.text")); // NOI18N
        cmdGenerate.setName("cmdGenerate"); // NOI18N
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblWarning)
                                .addComponent(lblWarning2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                          .addComponent(cmdGenerate)
                                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                          .addComponent(cmdCancel)))
                      .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addComponent(lblWarning)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                      .addComponent(lblWarning2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmdCancel)
                                .addComponent(cmdGenerate))
                      .addGap(20, 20, 20))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void cancel()
    {
        Utilities.showCancelScreen(this);
    }

    @Action
    public Task generateMidTerms()
    {
        return new GenerateMidTermsTask(org.jdesktop.application.Application.getInstance(ilearn.ILearnApp.class));
    }

    private class GenerateMidTermsTask extends org.jdesktop.application.Task<Object, Void>
    {

        String warnings = "Cannot generate mid-term reports due to the following issue(s):\n\n";

        GenerateMidTermsTask(org.jdesktop.application.Application app)
        {
            super(app);
        }

        @Override
        protected Object doInBackground()
        {
            setMessage("Running pre-generation checks.");
            setMessage("Checking grades");
            boolean gradesOk = checkGrades();
            if (!gradesOk)
            {
                return false;
            }
            setProgress(1, 0, 3);
            setMessage("Calculating mid-term grades.");
            boolean calculateMidTerms = Grade.calculateMidTerms();
            if (!calculateMidTerms)
            {
                warnings += "An error occurred while calculating the grades.\n";
                return false;
            }
            setProgress(2, 0, 3);
            setMessage("Saving Grades");
            boolean saveMidTerms = Grade.saveMidTerms();
            if (!saveMidTerms)
            {
                warnings += "An error occurred while saving the grades.\n";
                return false;
            }
            setProgress(3, 0, 3);
            return true;  // return your result
        }

        private boolean checkGrades()
        {
            boolean gradesOk = true;
            String message = "";
            ArrayList<Object> results = Grade.checkAllGrades();
            for (Object missingGrade : results)
            {
                String[] missing = (String[]) missingGrade;
                String studentName = Student.getStudentName(missing[0]);
                ArrayList<Object> assmt = Grade.getAssessmentInfo(missing[1]);
                message += studentName + " is missing a grade for the " + assmt.get(1) + " titled \"" + assmt.get(2) + "\" given on " + assmt.get(3) + "\n";
                gradesOk = false;
            }
            warnings += message;
            return gradesOk;
        }

        @Override
        protected void succeeded(Object result)
        {
            if (result == Boolean.TRUE)
            {
                String message = "The mid-term grades were successfully generated.";
                Utilities.showInfoMessage(rootPane, message);
                return;
            }
            else
            {
                FrmMidTermErrors frmMidTermErrors = new FrmMidTermErrors(null, true, warnings);
                frmMidTermErrors.setLocationRelativeTo(Environment.getMainFrame());
                frmMidTermErrors.setVisible(true);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JLabel lblWarning;
    private javax.swing.JLabel lblWarning2;
    // End of variables declaration//GEN-END:variables
}
